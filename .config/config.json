{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c384f0fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "score = 0.1\n",
    "SOLUTION = list(players.keys())\n",
    "SOLUTION.sort()\n",
    "print('======================================================================================')\n",
    "print('Question 1')\n",
    "print()\n",
    "if type(player_names) == list:\n",
    "    \n",
    "    score += .8\n",
    "    player_names.sort()\n",
    "    print('âœ… player_names has the correct datatype.')\n",
    "else:\n",
    "    found_type = type(player_names)\n",
    "    print(f'ðŸš« player_names has a datatype of {found_type} but should have a datatype of {list}.')\n",
    "    player_names = list(player_names)\n",
    "    player_names.sort()\n",
    "if player_names == SOLUTION:\n",
    "    score += .8\n",
    "    print('âœ… player_names contains the correct data.')\n",
    "else:\n",
    "    print(f'ðŸš« player_names = {player_names}, but should = {SOLUTION}.')\n",
    "\n",
    "\n",
    "if score > 0.1:\n",
    "    score -= 0.1\n",
    "\n",
    "print()\n",
    "print('Question 1 Score:')\n",
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e377937",
   "metadata": {},
   "outputs": [],
   "source": [
    "score = 0.1\n",
    "player_names = list(players.keys())\n",
    "SOLUTION = [(name, players[name]['nationality']) for name in player_names]\n",
    "\n",
    "print('======================================================================================')\n",
    "print('Question 2')\n",
    "print()\n",
    "if type(player_nationalities[0]) == tuple:\n",
    "    score += 0.4\n",
    "    print('âœ… player_nationalities correctly contains tuples.')\n",
    "else:\n",
    "    print('ðŸš« The first element in player_nationalities is incorrectly not a tuple.')\n",
    "    \n",
    "if len(player_nationalities[0]) == len(SOLUTION[0]):\n",
    "    score += 0.4\n",
    "    print('âœ… The tuples in player_nationalities have the correct length.')\n",
    "else:\n",
    "    print(f'ðŸš« The first tuple in player_nationalities has a length of {le(player_nationalities)} but should be a length of 2.')\n",
    "    \n",
    "if len(player_nationalities) == len(SOLUTION):\n",
    "    score += 0.4\n",
    "    print('âœ… player_nationalities has the correct number of tuples.')\n",
    "else:\n",
    "    print(f'ðŸš« player_nationalities has a length of {len(player_nationalities)} but should have a length of {len(SOLUTION)}.')\n",
    "    \n",
    "player_nationalities.sort()\n",
    "SOLUTION.sort()\n",
    "\n",
    "if player_nationalities == SOLUTION:\n",
    "    score += 0.4\n",
    "    print('âœ… player_nationalities contains the correct data.')\n",
    "else:\n",
    "    print(f'ðŸš« player_nationalities = {player_nationalities}\\n\\nbut should = {SOLUTION}.')\n",
    "\n",
    "if score > 0.1:\n",
    "    score -= 0.1\n",
    "\n",
    "print()\n",
    "print('Question 2 Score:')\n",
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a413dcfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "score = 0.1\n",
    "\n",
    "def SOLUTION(dict_,team_name):\n",
    "    player_list = []\n",
    "    for player in dict_:\n",
    "        if team_name in dict_[player]['teams']:\n",
    "            player_list.append(player)\n",
    "    return player_list\n",
    "\n",
    "# Create a list of unique teams in the players dictionary\n",
    "teams = []\n",
    "for player in players:\n",
    "    teams += players[player]['teams']\n",
    "teams = list(set(teams))\n",
    "\n",
    "print()\n",
    "print()\n",
    "print('======================================================================================')\n",
    "print('Question 3')\n",
    "# Check the output of the submitted function for each team\n",
    "for team in teams:\n",
    "    try:\n",
    "        solution = SOLUTION(players, team)\n",
    "        student_answer = get_players_on_team(players, team)\n",
    "        solution.sort()\n",
    "        student_answer.sort()\n",
    "        if student_answer == solution:\n",
    "            score += 0.2\n",
    "            print(f'âœ… The submitted function returned the correct data for team {team}.')\n",
    "        else:\n",
    "            print(f'ðŸš« The submitted function returned incorrect results for team {team}.')\n",
    "    except:\n",
    "        print(f'ðŸš« The submitted function threw an error for team {team}.')\n",
    "        \n",
    "if score > 0.1:\n",
    "    score -= 0.1\n",
    "    score = round(score, 1)\n",
    "\n",
    "print()\n",
    "print('Question 3 Score:')\n",
    "score"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
